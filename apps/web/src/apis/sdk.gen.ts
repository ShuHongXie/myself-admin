// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client'
import { client } from './client.gen'
import type {
  CreateMenuData,
  CreateMenuResponses,
  CreateRoleData,
  CreateRoleResponses,
  CreateUserByAdminData,
  CreateUserByAdminResponses,
  DeleteMenuData,
  DeleteMenuResponses,
  DeleteRoleData,
  DeleteRoleResponses,
  DeleteUserData,
  DeleteUserResponses,
  FindByPageData,
  FindByPageResponses,
  GetCaptchaData,
  GetCaptchaResponses,
  GetHelloData,
  GetHelloResponses,
  GetInfoData,
  GetInfoResponses,
  GetMenuDetailData,
  GetMenuDetailResponses,
  GetMenuTreeData,
  GetMenuTreeResponses,
  GetRoleByIdData,
  GetRoleByIdResponses,
  GetRolesByPageData,
  GetRolesByPageResponses,
  GetRolesListData,
  GetRolesListResponses,
  GetRoutersData,
  GetRoutersResponses,
  GetUserButtonPermissionsData,
  GetUserButtonPermissionsResponses,
  ListData,
  ListResponses,
  LoginData,
  LoginResponses,
  RegisterData,
  RegisterResponses,
  RemoveWithChildrenData,
  RemoveWithChildrenResponses,
  UpdateMenuData,
  UpdateMenuResponses,
  UpdatePasswordData,
  UpdatePasswordResponses,
  UpdateRoleData,
  UpdateRoleResponses,
  UpdateUserData,
  UpdateUserResponses
} from './types.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean
> = Options2<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

export const getHello = <ThrowOnError extends boolean = false>(
  options?: Options<GetHelloData, ThrowOnError>
) => {
  return (options?.client ?? client).get<GetHelloResponses, unknown, ThrowOnError>({
    url: '/',
    ...options
  })
}

/**
 * 账号注册
 */
export const register = <ThrowOnError extends boolean = false>(
  options: Options<RegisterData, ThrowOnError>
) => {
  return (options.client ?? client).post<RegisterResponses, unknown, ThrowOnError>({
    url: '/user/register',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * 修改密码
 */
export const updatePassword = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePasswordData, ThrowOnError>
) => {
  return (options.client ?? client).put<UpdatePasswordResponses, unknown, ThrowOnError>({
    url: '/user/updatePassword',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * 用户登录
 */
export const login = <ThrowOnError extends boolean = false>(
  options: Options<LoginData, ThrowOnError>
) => {
  return (options.client ?? client).post<LoginResponses, unknown, ThrowOnError>({
    url: '/user/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * 获取验证码
 */
export const getCaptcha = <ThrowOnError extends boolean = false>(
  options?: Options<GetCaptchaData, ThrowOnError>
) => {
  return (options?.client ?? client).get<GetCaptchaResponses, unknown, ThrowOnError>({
    url: '/user/captcha',
    ...options
  })
}

/**
 * 获取用户信息
 */
export const getInfo = <ThrowOnError extends boolean = false>(
  options?: Options<GetInfoData, ThrowOnError>
) => {
  return (options?.client ?? client).get<GetInfoResponses, unknown, ThrowOnError>({
    url: '/user/getInfo',
    ...options
  })
}

/**
 * 新增用户
 */
export const createUserByAdmin = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserByAdminData, ThrowOnError>
) => {
  return (options.client ?? client).post<CreateUserByAdminResponses, unknown, ThrowOnError>({
    url: '/user',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * 更新用户
 */
export const updateUser = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserData, ThrowOnError>
) => {
  return (options.client ?? client).put<UpdateUserResponses, unknown, ThrowOnError>({
    url: '/user',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * 删除用户
 */
export const deleteUser = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserData, ThrowOnError>
) => {
  return (options.client ?? client).delete<DeleteUserResponses, unknown, ThrowOnError>({
    url: '/user/{userId}',
    ...options
  })
}

/**
 * 获取用户列表
 */
export const list = <ThrowOnError extends boolean = false>(
  options: Options<ListData, ThrowOnError>
) => {
  return (options.client ?? client).get<ListResponses, unknown, ThrowOnError>({
    url: '/user/list',
    ...options
  })
}

/**
 * 新增菜单
 */
export const createMenu = <ThrowOnError extends boolean = false>(
  options: Options<CreateMenuData, ThrowOnError>
) => {
  return (options.client ?? client).post<CreateMenuResponses, unknown, ThrowOnError>({
    url: '/menu',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * 获取所有菜单(不含按钮)
 */
export const getRouters = <ThrowOnError extends boolean = false>(
  options?: Options<GetRoutersData, ThrowOnError>
) => {
  return (options?.client ?? client).get<GetRoutersResponses, unknown, ThrowOnError>({
    url: '/menu/getRouters',
    ...options
  })
}

/**
 * 获取所有菜单（包含按钮）
 */
export const getMenuTree = <ThrowOnError extends boolean = false>(
  options?: Options<GetMenuTreeData, ThrowOnError>
) => {
  return (options?.client ?? client).get<GetMenuTreeResponses, unknown, ThrowOnError>({
    url: '/menu/info',
    ...options
  })
}

/**
 * 获取用户按钮权限
 */
export const getUserButtonPermissions = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserButtonPermissionsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<GetUserButtonPermissionsResponses, unknown, ThrowOnError>({
    url: '/menu/buttonPermissions',
    ...options
  })
}

/**
 * 分页查询菜单列表
 */
export const findByPage = <ThrowOnError extends boolean = false>(
  options: Options<FindByPageData, ThrowOnError>
) => {
  return (options.client ?? client).get<FindByPageResponses, unknown, ThrowOnError>({
    url: '/menu/menusByPage',
    ...options
  })
}

/**
 * 删除菜单（需要先删除子菜单）
 */
export const deleteMenu = <ThrowOnError extends boolean = false>(
  options: Options<DeleteMenuData, ThrowOnError>
) => {
  return (options.client ?? client).delete<DeleteMenuResponses, unknown, ThrowOnError>({
    url: '/menu/{id}',
    ...options
  })
}

/**
 * 根据ID获取菜单详情
 */
export const getMenuDetail = <ThrowOnError extends boolean = false>(
  options: Options<GetMenuDetailData, ThrowOnError>
) => {
  return (options.client ?? client).get<GetMenuDetailResponses, unknown, ThrowOnError>({
    url: '/menu/{id}',
    ...options
  })
}

/**
 * 更新菜单
 */
export const updateMenu = <ThrowOnError extends boolean = false>(
  options: Options<UpdateMenuData, ThrowOnError>
) => {
  return (options.client ?? client).put<UpdateMenuResponses, unknown, ThrowOnError>({
    url: '/menu/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * 级联删除菜单及其所有子菜单
 */
export const removeWithChildren = <ThrowOnError extends boolean = false>(
  options: Options<RemoveWithChildrenData, ThrowOnError>
) => {
  return (options.client ?? client).delete<RemoveWithChildrenResponses, unknown, ThrowOnError>({
    url: '/menu/{id}/cascade',
    ...options
  })
}

/**
 * 创建角色
 */
export const createRole = <ThrowOnError extends boolean = false>(
  options: Options<CreateRoleData, ThrowOnError>
) => {
  return (options.client ?? client).post<CreateRoleResponses, unknown, ThrowOnError>({
    url: '/role',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * 获取角色分页列表
 */
export const getRolesByPage = <ThrowOnError extends boolean = false>(
  options: Options<GetRolesByPageData, ThrowOnError>
) => {
  return (options.client ?? client).get<GetRolesByPageResponses, unknown, ThrowOnError>({
    url: '/role/rolesByPage',
    ...options
  })
}

/**
 * 获取所有角色列表
 */
export const getRolesList = <ThrowOnError extends boolean = false>(
  options?: Options<GetRolesListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<GetRolesListResponses, unknown, ThrowOnError>({
    responseType: 'json',
    url: '/role/allRoles',
    ...options
  })
}

/**
 * 删除角色
 */
export const deleteRole = <ThrowOnError extends boolean = false>(
  options: Options<DeleteRoleData, ThrowOnError>
) => {
  return (options.client ?? client).delete<DeleteRoleResponses, unknown, ThrowOnError>({
    url: '/role/{id}',
    ...options
  })
}

/**
 * 获取单个角色信息
 */
export const getRoleById = <ThrowOnError extends boolean = false>(
  options: Options<GetRoleByIdData, ThrowOnError>
) => {
  return (options.client ?? client).get<GetRoleByIdResponses, unknown, ThrowOnError>({
    url: '/role/{id}',
    ...options
  })
}

/**
 * 更新角色
 */
export const updateRole = <ThrowOnError extends boolean = false>(
  options: Options<UpdateRoleData, ThrowOnError>
) => {
  return (options.client ?? client).put<UpdateRoleResponses, unknown, ThrowOnError>({
    url: '/role/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}
